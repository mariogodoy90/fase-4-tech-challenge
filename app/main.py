# Ajustando e Melhorando o Dashboard Interativo

import pandas as pd
import plotly.express as px
import numpy as np
import streamlit as st
import requests
from bs4 import BeautifulSoup
from scripts.train_model import train_model, predict_price
import joblib
import datetime
import os

# URL do site de onde vamos extrair os dados do pre√ßo do petr√≥leo Brent
url = 'http://www.ipeadata.gov.br/ExibeSerie.aspx?module=m&serid=1650971490&oper=view'

# Fazer a requisi√ß√£o para obter os dados da p√°gina
response = requests.get(url, timeout=10)
response.raise_for_status()

# Usar BeautifulSoup para fazer o parsing do HTML
soup = BeautifulSoup(response.content, 'html.parser')

# Verificar se a tabela de dados est√° presente no HTML
data = []
table = soup.find('table', {'id': 'grd_DXMainTable'})  # Procurar pela tabela com o ID espec√≠fico 'grd_DXMainTable'
if not table:
    st.error("Erro: Nenhuma tabela encontrada na p√°gina HTML.")
    st.stop()
else:
    # Extrair a tabela de dados
    rows = table.find_all('tr', {'class': ['dxgvDataRow', 'dxgvFocusedRow']})
    if len(rows) == 0:
        st.error("Erro: Nenhum dado encontrado na tabela.")
        st.stop()
    else:
        for row in rows:
            cols = row.find_all('td')
            if len(cols) < 2:
                continue
            date = cols[0].text.strip()
            price = cols[1].text.strip()
            try:
                data.append({'date': date, 'price': float(price.replace('.', '').replace(',', '.'))})
            except ValueError:
                st.warning(f"Valor inv√°lido encontrado e ignorado: {price}")

# Transformar os dados extra√≠dos em um DataFrame
df = pd.DataFrame(data)
df['date'] = pd.to_datetime(df['date'])

# Configurando o Streamlit para visualiza√ß√£o
def main():
    st.sidebar.title('Menu de Navega√ß√£o')
    option = st.sidebar.radio('Selecione a visualiza√ß√£o:', ['P√°gina Inicial', 'Varia√ß√£o Hist√≥rica', 'M√©dia Anual', 'Crises Econ√¥micas', 'Previs√£o de Pre√ßos e M√©tricas de Performance'])
    
    if option == 'P√°gina Inicial':
        st.title('üìä Dashboard Interativo - Pre√ßo do Petr√≥leo Brent - Fase 4 do Tech Challenge')
        st.markdown(
            """
            üåç **Bem-vindo ao Dashboard Interativo do Pre√ßo do Petr√≥leo Brent**.
            Explore a varia√ß√£o hist√≥rica dos pre√ßos e entenda os principais fatores que os influenciam.
            Utilize o menu ao lado para navegar por diferentes an√°lises e insights.
            """
        )
    
    if option == 'Varia√ß√£o Hist√≥rica':
        # Gr√°fico 1: Varia√ß√£o Hist√≥rica do Pre√ßo
        st.subheader('üìà Varia√ß√£o Hist√≥rica do Pre√ßo do Petr√≥leo')
        fig1 = px.line(df, x='date', y='price', title='Pre√ßo do Petr√≥leo Brent ao Longo do Tempo', line_shape='linear', labels={'date': 'Ano', 'price': 'Pre√ßo (US$)'}, color_discrete_sequence=['#1f77b4'])
        fig1.update_layout(title_font_size=20, xaxis_title_font_size=16, yaxis_title_font_size=16, margin=dict(l=40, r=40, t=60, b=40), legend_title_text='Legenda')
        fig1.update_xaxes(tickformat='%Y', fixedrange=True, showgrid=True, title_font=dict(size=14), tickfont=dict(size=12))
        fig1.update_yaxes(title_font=dict(size=14), tickfont=dict(size=12))
        fig1.update_xaxes(tickformat='%Y', fixedrange=True, showgrid=True)
        fig1.update_xaxes(tickformat='%Y', fixedrange=True, showgrid=True)
        st.plotly_chart(fig1, use_container_width=True, config={'scrollZoom': False, 'displayModeBar': False})
        st.markdown("üí° **Insight 1**: O pre√ßo do petr√≥leo apresenta picos significativos durante crises geopol√≠ticas, como guerras ou tens√µes no Oriente M√©dio.")
    
    elif option == 'M√©dia Anual':
        # Gr√°fico 2: Pre√ßo M√©dio por Ano
        if not df.empty:
            df['year'] = df['date'].dt.year
            yearly_avg = df.groupby('year')['price'].mean().reset_index()
            st.subheader('üìä Pre√ßo M√©dio Anual do Petr√≥leo')
            fig2 = px.bar(yearly_avg, x='year', y='price', title='Pre√ßo M√©dio Anual do Petr√≥leo Brent', labels={'year': 'Ano', 'price': 'Pre√ßo (US$)'}, color_discrete_sequence=['#ff7f0e'])
            fig2.update_xaxes(tickformat='%Y', fixedrange=True, showgrid=True)
            fig2.update_xaxes(tickformat='%Y', fixedrange=True, showgrid=True)
            st.plotly_chart(fig2, use_container_width=True, config={'scrollZoom': False, 'displayModeBar': False})
            st.markdown("üí° **Insight 2**: A m√©dia anual do pre√ßo do petr√≥leo reflete claramente os impactos de eventos econ√¥micos globais, como recess√µes e crises financeiras.")
    
    elif option == 'Crises Econ√¥micas':
        # Gr√°fico 3: An√°lise de Crises Econ√¥micas
        st.subheader('üìâ Impacto de Crises Econ√¥micas no Pre√ßo do Petr√≥leo')
        crises = [
            {'name': 'Crise Financeira de 2008', 'start': '2008-09-01', 'end': '2009-06-30'},
            {'name': 'Pandemia COVID-19', 'start': '2020-03-01', 'end': '2020-12-31'},
            {'name': 'Queda dos Pre√ßos do Petr√≥leo em 2014', 'start': '2014-06-01', 'end': '2016-02-29'},
            {'name': 'Guerra na Ucr√¢nia', 'start': '2022-02-01', 'end': '2022-12-31'}
        ]

        crise_selecionada = st.selectbox('Selecione a crise econ√¥mica que deseja visualizar:', [crise['name'] for crise in crises])
        crise = next(item for item in crises if item['name'] == crise_selecionada)
        mask = (df['date'] >= crise['start']) & (df['date'] <= crise['end'])
        if not df[mask].empty:
            fig3 = px.line(df[mask], x='date', y='price', title=f'Impacto da {crise['name']} no Pre√ßo do Petr√≥leo', labels={'date': 'Data', 'price': 'Pre√ßo'}, line_shape='linear', color_discrete_sequence=['#2ca02c'])
            fig3.update_layout(title_font_size=20, xaxis_title_font_size=16, yaxis_title_font_size=16, margin=dict(l=40, r=40, t=60, b=40), legend_title_text='Legenda')
            fig3.update_xaxes(tickformat='%Y', fixedrange=True, showgrid=True, title_font=dict(size=14), tickfont=dict(size=12))
            fig3.update_yaxes(title_font=dict(size=14), tickfont=dict(size=12))
            fig3.update_xaxes(tickformat='%Y', fixedrange=True, showgrid=True)
            fig3.update_xaxes(tickformat='%Y', fixedrange=True, showgrid=True)
            st.plotly_chart(fig3, use_container_width=True, config={'scrollZoom': False, 'displayModeBar': False})
            st.markdown(f"Insight: {crise['name']} teve um impacto significativo no pre√ßo, refletindo incertezas econ√¥micas globais.")

    elif option == 'Previs√£o de Pre√ßos e M√©tricas de Performance':
        # Chamando a fun√ß√£o de treinamento do modelo de Machine Learning
        st.subheader('üîÆ Previs√£o do Pre√ßo do Petr√≥leo e M√©tricas de Performance')
        st.markdown(
            """
            Utilizando um modelo de Machine Learning para prever o pre√ßo do petr√≥leo com base nos dados hist√≥ricos. 
            O modelo √© treinado com dados hist√≥ricos do pre√ßo do petr√≥leo e utiliza um algoritmo de **Random Forest Regressor** para fazer previs√µes futuras. 
            O gr√°fico abaixo compara os pre√ßos reais do petr√≥leo com os valores previstos pelo modelo, permitindo uma avalia√ß√£o visual da precis√£o do modelo.
            As m√©tricas de performance, como **Erro Quadr√°tico M√©dio (MSE)**, **Erro Absoluto M√©dio (MAE)** e **Coeficiente de Determina√ß√£o (R¬≤)**, s√£o apresentadas para avaliar quantitativamente a qualidade do modelo.
            """
        )
        
        # Usando session_state para armazenar o modelo treinado
        if 'model' not in st.session_state:
            st.session_state['model'] = None

        if os.path.exists('random_forest_model.pkl') and st.session_state['model'] is None:
            st.session_state['model'] = joblib.load('random_forest_model.pkl')
            st.success('Modelo carregado com sucesso!')
        
        if st.session_state['model'] is None:
            if st.button('Treinar Modelo e Ver Resultados', key='treinar_modelo'):
                st.session_state['model'] = train_model(df)
                joblib.dump(st.session_state['model'], 'random_forest_model.pkl')
                st.success('Modelo treinado e salvo com sucesso! Verifique as m√©tricas de performance.')
                
        if st.session_state['model'] is not None:
            # Fazer previs√µes e gerar gr√°fico comparativo
            X = df['price'].shift(1).dropna().values.reshape(-1, 1)
            y_real = df['price'][1:].values
            y_pred = st.session_state['model'].predict(X)

            st.subheader('M√©tricas de Performance do Modelo')
            from sklearn.metrics import mean_squared_error, mean_absolute_error, r2_score
            mse = mean_squared_error(y_real, y_pred)
            mae = mean_absolute_error(y_real, y_pred)
            r2 = r2_score(y_real, y_pred)

            # Exibindo as m√©tricas em uma tabela estruturada
            metrics_df = pd.DataFrame({
                'M√©trica': ['Erro Quadr√°tico M√©dio (MSE)', 'Erro Absoluto M√©dio (MAE)', 'Coeficiente de Determina√ß√£o (R¬≤)'],
                'Valor': [f'{mse:.2f}', f'{mae:.2f}', f'{r2:.2f}']
            })
            st.table(metrics_df)

            comparativo_df = pd.DataFrame({'Data': df['date'][1:], 'Pre√ßo Real': y_real, 'Pre√ßo Previsto': y_pred})
            fig4 = px.line(comparativo_df, x='Data', y=['Pre√ßo Real', 'Pre√ßo Previsto'], title='Compara√ß√£o entre Pre√ßo Real e Pre√ßo Previsto - Atualizado', labels={'Data': 'Ano', 'value': 'Pre√ßo (US$)'}, line_shape='linear', color_discrete_sequence=['#d62728', '#9467bd'])
            fig4.update_layout(title_font_size=20, xaxis_title_font_size=16, yaxis_title_font_size=16, margin=dict(l=40, r=40, t=60, b=40), legend_title_text='Legenda')
            fig4.update_xaxes(tickformat='%Y', fixedrange=True, showgrid=True, title_font=dict(size=14), tickfont=dict(size=12))
            fig4.update_yaxes(title_font=dict(size=14), tickfont=dict(size=12))
            fig4.update_xaxes(tickformat='%Y', fixedrange=True, showgrid=True)
            fig4.update_xaxes(tickformat='%Y', fixedrange=True, showgrid=True)
            st.plotly_chart(fig4, use_container_width=True, config={'scrollZoom': False, 'displayModeBar': False})
            st.markdown("üí° **Insight**: O gr√°fico compara os pre√ßos reais do petr√≥leo com os valores previstos pelo modelo, permitindo avaliar a precis√£o do modelo.")

            # Previs√£o para o pr√≥ximo dia
            if st.button('Prever Pre√ßo para o Pr√≥ximo Dia', key='prever_preco'):
                ultimo_preco = df[df['date'] == df['date'].max()]['price'].values[-1]
                proxima_data = datetime.datetime.now() + datetime.timedelta(days=1)
                previsao = st.session_state['model'].predict([[ultimo_preco]])[0]
                st.write(f"Previs√£o do pre√ßo do petr√≥leo para {proxima_data.strftime('%Y-%m-%d')}: ${previsao:.2f}")

if __name__ == '__main__':
    main()
